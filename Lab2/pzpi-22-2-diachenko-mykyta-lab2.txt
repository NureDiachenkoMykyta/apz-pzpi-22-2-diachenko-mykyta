Харківський національний університет радіоелектронікиФакультет комп’ютерних наукКафедра програмної інженерії

ЗВІТз лабораторної роботи №2 з дисципліни «Архітектура програмного забезпечення»на тему: «Розробка серверної частини застосунку»

Виконав:ст. гр. ПЗПІ-22-2 Д’яченко Микита Олександрович

Перевірив:ст. викладач кафедри ПІ Сокорчук Ігор Петрович

Харків – 2024

1 ІСТОРІЯ ЗМІН

№

Дата

Версія звіту

Опис змін та виправлень

1

10.06.2024

0.1

Початковий варіант звіту

2 ЗАВДАННЯ

– Розробити ефективну базу даних для серверної частини програмної системи.– Створити REST API для взаємодії з клієнтською частиною та IoT-пристроями.– Побудувати ER-діаграму, UML-діаграми прецедентів та описати архітектуру системи.– Продемонструвати розроблений функціонал у вигляді API-документації та відео.

3 ОПИС ВИКОНАНОЇ РОБОТИ

Робота розпочалася з побудови ER-діаграми, яка відображає структуру даних системи.Вибрано PostgreSQL як основну СУБД через її надійність, гнучкість та підтримку сучасних функцій.

Було реалізовано схему бази даних, що включає збереження користувачів, завдань, записів часу.Для підключення до БД використано Node.js з фреймворком Express.js.

Створено UML-діаграми прецедентів, які поділено на два блоки:– дії з базою даних (CRUD),– дії з IoT-пристроями (фітнес-браслети, смарт-годинники).

Розроблено REST API з підтримкою:– CRUD-операцій для користувачів, завдань та записів часу,– обробки таймерів активності,– генерації звітів та інтеграції з IoT.

Архітектура системи включає:– клієнтську частину (мобільні/веб-додатки),– серверну частину з API,– базу даних PostgreSQL.

Система ізольована через Docker. Тестування API здійснено в Postman. Усі основні функції працюють стабільно.

Використані технології: Node.js, Express.js, PostgreSQL, Sequelize, Docker.

4 ВИСНОВКИ

У результаті лабораторної роботи було створено серверну частину програмної системи з ефективною архітектурою, гнучким REST API, а також реалізовано взаємодію з реляційною базою даних PostgreSQL.

Отримано практичні навички роботи з ER- та UML-діаграмами, створення API та обробки запитів. Розроблений функціонал відповідає вимогам до централізованого аналізу часу.

ДОДАТОК А ER-діаграма[Рисунок А.1 — ER-діаграма даних]

ДОДАТОК Б Схема бази даних PostgreSQL[Рисунок Б.1 — Структура бази даних]

ДОДАТОК В UML-діаграми прецедентів[Рисунок В.1 — Дії з користувачами][Рисунок В.2 — Обробка інформації з IoT-пристроїв]

ДОДАТОК Г Програмний кодGitHub репозиторій: https://github.com/NureDiachenkoMykyta/arkpz-pzpi-22-2-diachenko-mykyta/tree/main/Task2

ДОДАТОК Д Відеозапис презентації: https://youtu.be/5bvszw6QczM

00:00 — Огляд архітектури системи01:30 — Демонстрація API та прикладів використання03:00 — Пояснення реалізації таймерів та запису активності

ДОДАТОК Е Розширений опис мети та ходу виконання роботи

МЕТА Метою роботи є розроблення ефективної бази даних для серверної частини програмної системи, а також створення прикладного програмного інтерфейсу (API) для аналізу та моніторингу витрат часу. Це забезпечить централізоване зберігання даних, зручний доступ до інформації та можливість інтеграції з іншими системами, що сприятиме покращенню управління часом та підвищенню продуктивності.

ХІД РОБОТИ Виконання лабораторної роботи розпочалося з побудови ER-діаграми, що відображає основну структуру даних системи. ER-діаграма розміщена у додатку А. Після цього було створено схему бази даних для збереження інформації користувачів, завдань і звітів.Для збереження структурованих даних було обрано реляційну базу даних PostgreSQL. Основними причинами вибору є:– Надійність: PostgreSQL є однією з найбільш стабільних і безпечних СУБД із відкритим вихідним кодом.– Гнучкість: Підтримує складні транзакції, що важливо для системи, яка працює з конфіденційними даними.– Широкий функціонал: Інструменти для розширеної аналітики та підтримка JSON, що забезпечує додаткову гнучкість у роботі з даними.Схема бази даних наведена у додатку Б. Далі було створено функції для підключення до PostgreSQL із застосунку, написаного на Node.js.

UML-діаграмиПісля створення базових функціональних компонентів було розроблено UML-діаграми прецедентів для серверної частини. Для зручності і уникнення надмірної складності діаграми було поділено на дві частини:– Дії з базою даних, що включають збереження, оновлення та видалення записів.– Дії системи з обробки інформації від IoT-пристроїв, таких як смарт-годинники та фітнес-браслети.Обидві діаграми наведені у додатку В.

Розробка API На основі специфікації було розроблено REST API для забезпечення інтеграції серверної частини з клієнтськими додатками. API включає наступні функції:– CRUD-операції для управління даними користувачів і завдань.– Отримання даних з IoT-пристроїв для автоматичного обліку активності.

Архітектура системиСистема має багаторівневу архітектуру, яка складається з наступних компонентів:– Клієнтська частина: мобільний та веб-додатки, що надсилають запити до серверної складової.– Серверна частина: обробляє запити клієнтів та взаємодіє з базою даних через REST API.– СУБД PostgreSQL: забезпечує збереження та обробку структурованих даних.Взаємодія між компонентами реалізована через RESTful API, що дозволяє легко інтегрувати систему з іншими додатками або пристроями IoT.

Використані технології:– Node.js: використовується для серверної частини, забезпечуючи швидкодію і масштабованість.– Express.js: дозволяє швидко налаштовувати маршрути для HTTP-запитів.– PostgreSQL: основна СУБД для збереження даних.– Docker: забезпечує ізоляцію і простоту розгортання системи.

ТестуванняРозроблене API було протестоване за допомогою Postman. Усі основні функції працюють стабільно, що підтверджує правильність реалізації серверної частини.

Повний код проекту наведено у GitHub, посилання на який можна знайти у додатку Г. Відео демонстрація роботи системи доступна у додатку Д.